---
title: Services
description: Any type of add-on that can be provisioned alongside your application; for example, a database or an account on a third-party SaaS provider. 
---
There are two ways in which Cloud Foundry enables developers to add services to their applications, [Managed Services](#managed) and [User-provided Service Instances](#user-provided). Managed Services have been integrated with Cloud Foundry via APIs and provision new service instances and credentials on demand. User-provided Service Instances are a mechanism to deliver credentials to applications for service instances which have been pre-provisioned outside of Cloud Foundry.

## <a id='managed'></a>Managed Services ##

Services are integrated with Cloud Foundry by implementing a documented API for which the cloud controller is the client; we call this the Service Broker API. This should not be confused with the cloud controller API, often used to refer to the version of Cloud Foundry itself; when one refers to "Cloud Foundry v2" they are referring to the version of the cloud controller API. The services API is versioned independently of the cloud controller API.

Service Broker is the term we use to refer to a component of the service which implements the service broker API. This component was formerly referred to as a Service Gateway, however as traffic between applications and services does not flow through the broker we found the term gateway caused confusion. Although gateway still appears in old code, we use the term broker in conversation, in new code, and are updating documentation to reflect the change.

In general, service brokers advertise a catalog of service offerings and service plans to Cloud Foundry, and receive calls from Cloud Foundry for five functions: fetch catalog, create, bind, unbind, and delete. What a broker does with each call can vary between services; in general create reserves resources on a service and bind delivers information to an application necessary for accessing the resource. We call the reserved resource a Service Instance. What a service instance represents can vary by service; it could be a single database on a multi-tenant server, a dedicated cluster, or even just an account on a web application. 

### <a id='architecture'></a>Service Architecture ###

How a service is implemented is up to the service provider/developer. Cloud Foundry only requires that the service provider implement the service broker API. A broker can be implemented as a seperate application, or by adding the required http endpoints to an existing service.

Because Cloud Foundry only requires that a service implements the broker API in order to be available to Cloud Foundry end users, many deployment models are possible. The following are examples of valid deployment models.

* Entire service packaged and deployed by BOSH alongside Cloud Foundry
* Broker packaged and deployed by BOSH alongside Cloud Foundry, rest of the service deployed and maintained by other means
* Broker (and optionally service) pushed as an application to Cloud Foundry user space
* Entire service, including broker, deployed and maintained outside of Cloud Foundry by other means

### <a id='api'></a>Service Broker API ###

The current major version of Service Broker API is v2. Brokers which implement the v2 API are referred to as v2 brokers. All changes to the v2 API will be additive and optional, no endpoints or fields will be removed until the next major version.

[v2 Service Broker API Documentation](writing-service.html)

Cloud Foundry currently supports both v2 brokers and v1 brokers, but support for v1 brokers will be removed from the next major version of cloud controller. Although there is no timeline for that release, we recommend new brokers are implemented with the v2 Services API and existing brokers are upgraded. For reference, the [v1 Service Broker API](writing-service-v1.html).


### <a id='developing'></a>Developing a service broker
1. You'll need a Cloud Foundry instance to deploy and test your service broker as you are developing it. You may use an existing install of CF that you have admin access to. Otherwise, we recommend installing a standalone CF instance using [Bosh Lite](https://github.com/cloudfoundry/bosh-lite).
2. Read [v2 Service Broker API Documentation](writing-service.html), [Managing Service Brokers on CF](managing-service-brokers.html), and [Using Services](../../../using/services), which explain how to implement and deploy a service broker and how CF uses service brokers to manage services.
3. Refer to the example service brokers below as a starting point for developing your broker.

### <a id='examples'></a>Example Service Brokers

The following example service broker applications have been developed - these are a great starting point if you are developing your own service broker.

#### Ruby

1. [An example Service Broker (GitHub repository service)](https://github.com/cloudfoundry-samples/github-service-broker-ruby) - this is designed to be an easy-to-read example of a service broker, with complete documentation, and comes with a demo app that uses the service.  The broker can either be deployed as an application on CF or hosted anywhere. The service itself (GitHub) is separate from the broker.
2. [Another example Service Broker (MySQL database service)](https://github.com/cloudfoundry/cf-mysql-broker) - this broker and the [MySQL service](https://github.com/cloudfoundry/cf-mysql-release) it supports are designed to be deployed together as [BOSH](https://github.com/cloudfoundry/bosh)-managed service broker and service nodes. BOSH is responsible for deployment and operation of all of the processes necessary for the service.

#### Java
* coming soon

#### Python
* coming soon


## <a id='user-provided'></a>User-provided Service Instances ##

Both operators and developers frequently ask how applications pushed to their Cloud Foundry instances can bind with external services, such as Oracle, which they operate themselves or are outside of Cloud Foundry's control. [User-provided Service Instances](../../../using/services/user-provided.html) enable developers to use external services with their applications using familiar workflows. 
